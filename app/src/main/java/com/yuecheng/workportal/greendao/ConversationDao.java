package com.yuecheng.workportal.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuecheng.workportal.module.conversation.bean.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "conversation".
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "conversation";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MessageId = new Property(1, int.class, "messageId", false, "MESSAGE_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property TargetId = new Property(4, String.class, "targetId", false, "TARGET_ID");
        public final static Property TargetName = new Property(5, String.class, "targetName", false, "TARGET_NAME");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property SenderUserId = new Property(7, String.class, "senderUserId", false, "SENDER_USER_ID");
        public final static Property SenderName = new Property(8, Long.class, "senderName", false, "SENDER_NAME");
        public final static Property SentTime = new Property(9, Long.class, "sentTime", false, "SENT_TIME");
        public final static Property ReceivedTime = new Property(10, Long.class, "receivedTime", false, "RECEIVED_TIME");
        public final static Property Type = new Property(11, Integer.class, "type", false, "TYPE");
    }


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"conversation\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" INTEGER NOT NULL ," + // 1: messageId
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"TARGET_ID\" TEXT," + // 4: targetId
                "\"TARGET_NAME\" TEXT," + // 5: targetName
                "\"ICON\" TEXT," + // 6: icon
                "\"SENDER_USER_ID\" TEXT," + // 7: senderUserId
                "\"SENDER_NAME\" INTEGER," + // 8: senderName
                "\"SENT_TIME\" INTEGER," + // 9: sentTime
                "\"RECEIVED_TIME\" INTEGER," + // 10: receivedTime
                "\"TYPE\" INTEGER);"); // 11: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"conversation\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessageId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(5, targetId);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(6, targetName);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String senderUserId = entity.getSenderUserId();
        if (senderUserId != null) {
            stmt.bindString(8, senderUserId);
        }
 
        Long senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindLong(9, senderName);
        }
 
        Long sentTime = entity.getSentTime();
        if (sentTime != null) {
            stmt.bindLong(10, sentTime);
        }
 
        Long receivedTime = entity.getReceivedTime();
        if (receivedTime != null) {
            stmt.bindLong(11, receivedTime);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(12, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMessageId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindString(5, targetId);
        }
 
        String targetName = entity.getTargetName();
        if (targetName != null) {
            stmt.bindString(6, targetName);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String senderUserId = entity.getSenderUserId();
        if (senderUserId != null) {
            stmt.bindString(8, senderUserId);
        }
 
        Long senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindLong(9, senderName);
        }
 
        Long sentTime = entity.getSentTime();
        if (sentTime != null) {
            stmt.bindLong(10, sentTime);
        }
 
        Long receivedTime = entity.getReceivedTime();
        if (receivedTime != null) {
            stmt.bindLong(11, receivedTime);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(12, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // messageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // targetId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // targetName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // senderUserId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // senderName
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // sentTime
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // receivedTime
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTargetName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSenderUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSenderName(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSentTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setReceivedTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Conversation entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
